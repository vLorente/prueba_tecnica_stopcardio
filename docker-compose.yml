# ============================================================================
# Docker Compose - Sistema de Gestión de RRHH
# ============================================================================
# Aplicación completa con Frontend (Angular + Nginx), Backend (FastAPI) y PostgreSQL
#
# Uso:
#   - Desarrollo:   docker-compose up
#   - Producción:   docker-compose -f docker-compose.yml up -d
#   - Detener:      docker-compose down
#   - Limpiar todo: docker-compose down -v (elimina volúmenes)
#
# IMPORTANTE: Configurar archivo .env antes de ejecutar (ver .env.example)
# ============================================================================

services:
  # --------------------------------------------------------------------------
  # Base de Datos PostgreSQL
  # --------------------------------------------------------------------------
  db:
    image: postgres:16-alpine
    container_name: hr_postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hr_production}
      POSTGRES_USER: ${POSTGRES_USER:-hr_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMeInProduction}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - hr_network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hr_admin} -d ${POSTGRES_DB:-hr_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --------------------------------------------------------------------------
  # Backend - FastAPI
  # --------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hr_backend
    restart: unless-stopped
    
    environment:
      # Base de datos
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-hr_admin}:${POSTGRES_PASSWORD:-ChangeMeInProduction}@db:5432/${POSTGRES_DB:-hr_production}
      
      # JWT y Seguridad
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_change_in_production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Aplicación
      ENV: ${ENV:-production}
      APP_NAME: ${APP_NAME:-Sistema de Gestión de RRHH}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: ${DEBUG:-false}
      
      # CORS - Permitir frontend
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080,http://frontend:8080}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    networks:
      - hr_network
    
    depends_on:
      db:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Volumen para logs (opcional)
    volumes:
      - backend_logs:/app/logs

  # --------------------------------------------------------------------------
  # Frontend - Angular con Nginx
  # --------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hr_frontend
    restart: unless-stopped
    
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    
    networks:
      - hr_network
    
    depends_on:
      backend:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # --------------------------------------------------------------------------
  # pgAdmin - Administrador de PostgreSQL
  # --------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hr_pgadmin
    restart: unless-stopped
    
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@stopcardio.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    
    networks:
      - hr_network
    
    depends_on:
      db:
        condition: service_healthy
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin

# =============================================================================
# Redes
# =============================================================================
networks:
  hr_network:
    driver: bridge
    name: hr_network

# =============================================================================
# Volúmenes Persistentes
# =============================================================================
volumes:
  # Datos de PostgreSQL - Persisten entre reinicios
  postgres_data:
    driver: local
    name: hr_postgres_data
  
  # Logs del backend (opcional)
  backend_logs:
    driver: local
    name: hr_backend_logs
  
  # Datos de pgAdmin - Configuración y servidores guardados
  pgadmin_data:
    driver: local
    name: hr_pgadmin_data
