###
# API REST Tests - Sistema de Gestión de Fichajes y RRHH
# Usar con la extensión REST Client de VS Code
# Base URL: http://localhost:8000
###

@baseUrl = http://localhost:8000
@contentType = application/json

### Variables (actualizar con tokens reales después de login)
@employeeToken = tu_token_de_empleado_aqui
@hrToken = tu_token_de_hr_aqui
@userId = 1
@fichajeId = 1
@solicitudId = 1

################################################################################
# AUTENTICACIÓN
################################################################################

### 1. Login como HR
# @name loginHR
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@stopcardio.com",
  "password": "admin123"
}

### Guardar token HR (ejecutar después del login)
@hrToken = {{loginHR.response.body.access_token}}

### 2. Login como Empleado
# @name loginEmployee
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "employee@test.com",
  "password": "password123"
}

### Guardar token Empleado (ejecutar después del login)
@employeeToken = {{loginEmployee.response.body.access_token}}

### 3. Login con credenciales incorrectas (debería fallar)
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "noexiste@test.com",
  "password": "wrongpassword"
}

### 4. Obtener información del usuario actual (con token HR)
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{hrToken}}

### 5. Obtener información del usuario actual (con token Empleado)
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{employeeToken}}

### 6. Logout
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{employeeToken}}

################################################################################
# GESTIÓN DE FICHAJES
################################################################################

### 47. Check-in (registrar entrada) como empleado
# @name checkIn
POST {{baseUrl}}/api/fichajes/check-in
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{}

### Guardar ID del fichaje creado
@fichajeId = {{checkIn.response.body.id}}

### 48. Intentar hacer check-in con fichaje activo (debería fallar con 400)
POST {{baseUrl}}/api/fichajes/check-in
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{}

### 49. Check-out (registrar salida) del fichaje activo
POST {{baseUrl}}/api/fichajes/check-out
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{}

### 50. Intentar check-out sin fichaje activo (debería fallar con 400)
POST {{baseUrl}}/api/fichajes/check-out
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{}

### 51. Ver mis fichajes (como empleado)
GET {{baseUrl}}/api/fichajes/me
Authorization: Bearer {{employeeToken}}

### 52. Ver mis fichajes con paginación
GET {{baseUrl}}/api/fichajes/me?skip=0&limit=5
Authorization: Bearer {{employeeToken}}

### 53. Filtrar mis fichajes por fecha de inicio
GET {{baseUrl}}/api/fichajes/me?start_date=2025-10-01
Authorization: Bearer {{employeeToken}}

### 54. Filtrar mis fichajes por rango de fechas
GET {{baseUrl}}/api/fichajes/me?start_date=2025-10-01&end_date=2025-10-15
Authorization: Bearer {{employeeToken}}

### 55. Filtrar mis fichajes por estado (válidos)
GET {{baseUrl}}/api/fichajes/me?status=valid
Authorization: Bearer {{employeeToken}}

### 56. Filtrar mis fichajes por estado (pendientes de corrección)
GET {{baseUrl}}/api/fichajes/me?status=pending_correction
Authorization: Bearer {{employeeToken}}

### 57. Ver todos los fichajes de todos los usuarios (como HR)
GET {{baseUrl}}/api/fichajes/
Authorization: Bearer {{hrToken}}

### 58. Intentar ver todos los fichajes como empleado (debería fallar con 403)
GET {{baseUrl}}/api/fichajes/
Authorization: Bearer {{employeeToken}}

### 59. Filtrar fichajes por usuario específico (como HR)
GET {{baseUrl}}/api/fichajes/?user_id={{userId}}
Authorization: Bearer {{hrToken}}

### 60. Ver un fichaje por ID
GET {{baseUrl}}/api/fichajes/{{fichajeId}}
Authorization: Bearer {{employeeToken}}

### 61. Ver fichaje de otro usuario como empleado (debería fallar con 403)
GET {{baseUrl}}/api/fichajes/1
Authorization: Bearer {{employeeToken}}

### 62. Ver fichaje de cualquier usuario como HR
GET {{baseUrl}}/api/fichajes/1
Authorization: Bearer {{hrToken}}

### 63. Ver fichaje inexistente (debería fallar con 404)
GET {{baseUrl}}/api/fichajes/99999
Authorization: Bearer {{hrToken}}

### 64. Ver mi fichaje activo (sin salida)
GET {{baseUrl}}/api/fichajes/active
Authorization: Bearer {{employeeToken}}

### 65. Ver mi fichaje activo cuando no hay ninguno (debería fallar con 404)
GET {{baseUrl}}/api/fichajes/active
Authorization: Bearer {{employeeToken}}

################################################################################
# CORRECCIONES DE FICHAJES
################################################################################

### 66. Solicitar corrección de fichaje
POST {{baseUrl}}/api/fichajes/{{fichajeId}}/request-correction
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "check_in": "2025-10-15T08:30:00",
  "check_out": "2025-10-15T17:30:00",
  "correction_reason": "Olvidé fichar a tiempo, estas son las horas correctas"
}

### 67. Solicitar corrección sin motivo (debería fallar con 422)
POST {{baseUrl}}/api/fichajes/{{fichajeId}}/request-correction
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "check_in": "2025-10-15T08:30:00",
  "check_out": "2025-10-15T17:30:00",
  "correction_reason": "Corto"
}

### 68. Solicitar corrección de fichaje de otro usuario (debería fallar con 403)
POST {{baseUrl}}/api/fichajes/1/request-correction
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "check_in": "2025-10-15T08:30:00",
  "check_out": "2025-10-15T17:30:00",
  "correction_reason": "Este no es mi fichaje, debería fallar"
}

### 69. Solicitar corrección con check_out anterior a check_in (debería fallar con 400)
POST {{baseUrl}}/api/fichajes/{{fichajeId}}/request-correction
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "check_in": "2025-10-15T18:00:00",
  "check_out": "2025-10-15T09:00:00",
  "correction_reason": "Horarios inválidos - salida antes de entrada"
}

################################################################################
# APROBACIÓN/RECHAZO DE CORRECCIONES (HR)
################################################################################

### 70. Aprobar corrección de fichaje (como HR)
POST {{baseUrl}}/api/fichajes/{{fichajeId}}/approve
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "approval_notes": "Corrección aprobada - documentación verificada"
}

### 71. Rechazar corrección de fichaje (como HR)
POST {{baseUrl}}/api/fichajes/{{fichajeId}}/approve
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": false,
  "approval_notes": "Necesitas presentar justificante médico o documentación adicional"
}

### 72. Empleado intenta aprobar corrección (debería fallar con 403)
POST {{baseUrl}}/api/fichajes/1/approve
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "approval_notes": "No tengo permisos"
}

### 73. Aprobar fichaje que no está pendiente (debería fallar con 400)
POST {{baseUrl}}/api/fichajes/1/approve
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "approval_notes": "Este fichaje no está pendiente"
}

################################################################################
# ESTADÍSTICAS DE FICHAJES
################################################################################

### 74. Ver mis estadísticas de fichajes
GET {{baseUrl}}/api/fichajes/stats/me
Authorization: Bearer {{employeeToken}}

### 75. Ver mis estadísticas con filtro de fechas
GET {{baseUrl}}/api/fichajes/stats/me?start_date=2025-10-01&end_date=2025-10-15
Authorization: Bearer {{employeeToken}}

### 76. HR ve estadísticas de un empleado específico
GET {{baseUrl}}/api/fichajes/stats/user/{{userId}}
Authorization: Bearer {{hrToken}}

### 77. HR ve estadísticas de empleado con filtro de fechas
GET {{baseUrl}}/api/fichajes/stats/user/{{userId}}?start_date=2025-10-01&end_date=2025-10-15
Authorization: Bearer {{hrToken}}

### 78. Empleado intenta ver estadísticas de otro usuario (debería fallar con 403)
GET {{baseUrl}}/api/fichajes/stats/user/1
Authorization: Bearer {{employeeToken}}

### 79. Ver estadísticas generales de todos los empleados (como HR)
GET {{baseUrl}}/api/fichajes/stats/general
Authorization: Bearer {{hrToken}}

### 80. Ver estadísticas generales con filtro de fechas
GET {{baseUrl}}/api/fichajes/stats/general?start_date=2025-10-01&end_date=2025-10-15
Authorization: Bearer {{hrToken}}

### 81. Empleado intenta ver estadísticas generales (debería fallar con 403)
GET {{baseUrl}}/api/fichajes/stats/general
Authorization: Bearer {{employeeToken}}

################################################################################
# GESTIÓN DE SOLICITUDES DE VACACIONES (EMPLEADO)
################################################################################

### 82. Crear solicitud de vacaciones
# @name createSolicitud
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "vacation",
  "fecha_inicio": "2025-11-01",
  "fecha_fin": "2025-11-05",
  "motivo": "Vacaciones familiares planificadas con antelación"
}

### Guardar ID de la solicitud creada
@solicitudId = {{createSolicitud.response.body.id}}

### 83. Crear solicitud de baja médica
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "sick_leave",
  "fecha_inicio": "2025-10-20",
  "fecha_fin": "2025-10-22",
  "motivo": "Cita médica especialista y recuperación posterior"
}

### 84. Crear solicitud de asunto personal
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "personal",
  "fecha_inicio": "2025-10-25",
  "fecha_fin": "2025-10-25",
  "motivo": "Gestión de trámites bancarios y documentación legal importante"
}

### 85. Crear solicitud con motivo corto (debería fallar con 422)
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "vacation",
  "fecha_inicio": "2025-11-10",
  "fecha_fin": "2025-11-12",
  "motivo": "Corto"
}

### 86. Crear solicitud con fechas inválidas (fin antes de inicio)
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "vacation",
  "fecha_inicio": "2025-11-20",
  "fecha_fin": "2025-11-15",
  "motivo": "Fechas inválidas - fin antes de inicio"
}

### 87. Crear solicitud con fecha pasada (debería fallar con 400)
POST {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "tipo": "vacation",
  "fecha_inicio": "2025-09-01",
  "fecha_fin": "2025-09-05",
  "motivo": "Solicitud con fecha pasada que debería fallar"
}

### 88. Ver mis solicitudes
GET {{baseUrl}}/api/vacaciones/me
Authorization: Bearer {{employeeToken}}

### 89. Ver mis solicitudes con paginación
GET {{baseUrl}}/api/vacaciones/me?skip=0&limit=5
Authorization: Bearer {{employeeToken}}

### 90. Filtrar mis solicitudes por tipo (vacaciones)
GET {{baseUrl}}/api/vacaciones/me?tipo=vacation
Authorization: Bearer {{employeeToken}}

### 91. Filtrar mis solicitudes por estado (pendientes)
GET {{baseUrl}}/api/vacaciones/me?status=pending
Authorization: Bearer {{employeeToken}}

### 92. Filtrar mis solicitudes por estado (aprobadas)
GET {{baseUrl}}/api/vacaciones/me?status=approved
Authorization: Bearer {{employeeToken}}

### 93. Filtrar mis solicitudes por rango de fechas
GET {{baseUrl}}/api/vacaciones/me?start_date=2025-10-01&end_date=2025-12-31
Authorization: Bearer {{employeeToken}}

### 94. Ver una solicitud específica por ID
GET {{baseUrl}}/api/vacaciones/{{solicitudId}}
Authorization: Bearer {{employeeToken}}

### 95. Ver solicitud inexistente (debería fallar con 404)
GET {{baseUrl}}/api/vacaciones/99999
Authorization: Bearer {{employeeToken}}

### 96. Actualizar solicitud pendiente
PUT {{baseUrl}}/api/vacaciones/{{solicitudId}}
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "fecha_inicio": "2025-11-02",
  "fecha_fin": "2025-11-06",
  "motivo": "Vacaciones actualizadas - cambio de fechas por disponibilidad familiar"
}

### 97. Intentar actualizar solicitud ya aprobada (debería fallar con 400)
PUT {{baseUrl}}/api/vacaciones/1
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "motivo": "No se puede actualizar una solicitud aprobada"
}

### 98. Cancelar solicitud pendiente
DELETE {{baseUrl}}/api/vacaciones/{{solicitudId}}
Authorization: Bearer {{employeeToken}}

### 99. Intentar cancelar solicitud ya aprobada (debería fallar con 400)
DELETE {{baseUrl}}/api/vacaciones/1
Authorization: Bearer {{employeeToken}}

### 100. Ver mi balance de vacaciones
GET {{baseUrl}}/api/vacaciones/me/balance
Authorization: Bearer {{employeeToken}}

################################################################################
# GESTIÓN DE SOLICITUDES DE VACACIONES (HR)
################################################################################

### 101. Ver todas las solicitudes (como HR)
GET {{baseUrl}}/api/vacaciones/
Authorization: Bearer {{hrToken}}

### 102. Ver todas las solicitudes con paginación
GET {{baseUrl}}/api/vacaciones/?skip=0&limit=10
Authorization: Bearer {{hrToken}}

### 103. Filtrar solicitudes por usuario específico
GET {{baseUrl}}/api/vacaciones/?user_id={{userId}}
Authorization: Bearer {{hrToken}}

### 104. Filtrar solicitudes por tipo (vacaciones)
GET {{baseUrl}}/api/vacaciones/?tipo=vacation
Authorization: Bearer {{hrToken}}

### 105. Filtrar solicitudes por estado (pendientes)
GET {{baseUrl}}/api/vacaciones/?status=pending
Authorization: Bearer {{hrToken}}

### 106. Ver solo solicitudes pendientes de revisión
GET {{baseUrl}}/api/vacaciones/pending
Authorization: Bearer {{hrToken}}

### 107. Empleado intenta ver solicitudes pendientes (debería fallar con 403)
GET {{baseUrl}}/api/vacaciones/pending
Authorization: Bearer {{employeeToken}}

### 108. Ver solicitud de cualquier empleado (como HR)
GET {{baseUrl}}/api/vacaciones/1
Authorization: Bearer {{hrToken}}

### 109. Aprobar solicitud
POST {{baseUrl}}/api/vacaciones/{{solicitudId}}/review
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "comentarios_revision": "Aprobado. Disfruta tus vacaciones."
}

### 110. Rechazar solicitud
POST {{baseUrl}}/api/vacaciones/{{solicitudId}}/review
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": false,
  "comentarios_revision": "No se puede aprobar en este período. Ya hay 2 empleados de vacaciones."
}

### 111. Rechazar solicitud sin comentario (debería fallar con 422)
POST {{baseUrl}}/api/vacaciones/{{solicitudId}}/review
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": false,
  "comentarios_revision": "Corto"
}

### 112. Empleado intenta aprobar solicitud (debería fallar con 403)
POST {{baseUrl}}/api/vacaciones/1/review
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "comentarios_revision": "No tengo permisos para aprobar"
}

### 113. Intentar revisar solicitud ya revisada (debería fallar con 400)
POST {{baseUrl}}/api/vacaciones/1/review
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "approved": true,
  "comentarios_revision": "Esta solicitud ya fue revisada"
}

### 114. Ver balance de vacaciones de un empleado específico
GET {{baseUrl}}/api/vacaciones/balance/{{userId}}
Authorization: Bearer {{hrToken}}

### 115. Empleado intenta ver balance de otro empleado (debería fallar con 403)
GET {{baseUrl}}/api/vacaciones/balance/1
Authorization: Bearer {{employeeToken}}

################################################################################
# SECUENCIA DE PRUEBA COMPLETA
################################################################################

################################################################################
# GESTIÓN DE USUARIOS (CRUD)
################################################################################

### 7. Crear nuevo usuario empleado (solo HR)
POST {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "nuevo.empleado@test.com",
  "full_name": "Nuevo Empleado Test",
  "password": "securepass123",
  "role": "employee"
}

### 8. Crear nuevo usuario HR (solo HR)
POST {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "nuevo.hr@test.com",
  "full_name": "Nuevo HR Test",
  "password": "securepass123",
  "role": "hr"
}

### 9. Intentar crear usuario sin autenticación (debería fallar con 401)
POST {{baseUrl}}/api/users/
Content-Type: {{contentType}}

{
  "email": "sinauth@test.com",
  "full_name": "Sin Autenticación",
  "password": "securepass123",
  "role": "employee"
}

### 10. Crear usuario con email duplicado (debería fallar con 409)
POST {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "employee@test.com",
  "full_name": "Email Duplicado",
  "password": "securepass123",
  "role": "employee"
}

### 11. Crear usuario con email inválido (debería fallar con 422)
POST {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "not-an-email",
  "full_name": "Email Inválido",
  "password": "securepass123",
  "role": "employee"
}

### 12. Crear usuario con contraseña corta (debería fallar con 422)
POST {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "test@test.com",
  "full_name": "Contraseña Corta",
  "password": "123",
  "role": "employee"
}

################################################################################
# LISTADO DE USUARIOS
################################################################################

### 13. Listar todos los usuarios (como HR)
GET {{baseUrl}}/api/users/
Authorization: Bearer {{hrToken}}

### 14. Listar usuarios con paginación
GET {{baseUrl}}/api/users/?skip=0&limit=5
Authorization: Bearer {{hrToken}}

### 15. Filtrar usuarios por rol (employee)
GET {{baseUrl}}/api/users/?role=employee
Authorization: Bearer {{hrToken}}

### 16. Filtrar usuarios por rol (hr)
GET {{baseUrl}}/api/users/?role=hr
Authorization: Bearer {{hrToken}}

### 17. Filtrar usuarios activos
GET {{baseUrl}}/api/users/?is_active=true
Authorization: Bearer {{hrToken}}

### 18. Combinar filtros: empleados activos
GET {{baseUrl}}/api/users/?role=employee&is_active=true
Authorization: Bearer {{hrToken}}

### 19. Intentar listar usuarios como empleado (debería fallar con 403)
GET {{baseUrl}}/api/users/
Authorization: Bearer {{employeeToken}}

### 20. Intentar listar usuarios sin autenticación (debería fallar con 401)
GET {{baseUrl}}/api/users/

################################################################################
# CONSULTAR USUARIOS INDIVIDUALES
################################################################################

### 21. Obtener perfil propio (como empleado)
GET {{baseUrl}}/api/users/me
Authorization: Bearer {{employeeToken}}

### 22. Obtener perfil propio (como HR)
GET {{baseUrl}}/api/users/me
Authorization: Bearer {{hrToken}}

### 23. Obtener usuario por ID (como HR)
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{hrToken}}

### 24. Empleado intenta ver otro usuario (debería fallar con 403)
GET {{baseUrl}}/api/users/1
Authorization: Bearer {{employeeToken}}

### 25. Obtener usuario inexistente (debería fallar con 404)
GET {{baseUrl}}/api/users/99999
Authorization: Bearer {{hrToken}}

################################################################################
# ACTUALIZAR USUARIOS
################################################################################

### 26. Actualizar usuario completamente (como HR)
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "actualizado@test.com",
  "full_name": "Nombre Actualizado",
  "role": "employee",
  "is_active": true
}

### 27. Empleado intenta actualizar usuario (debería fallar con 403)
PUT {{baseUrl}}/api/users/1
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "full_name": "Intento Actualización"
}

### 28. Actualizar a email duplicado (debería fallar con 409)
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{hrToken}}
Content-Type: {{contentType}}

{
  "email": "hr@test.com"
}

### 29. Actualizar perfil propio (como empleado)
PATCH {{baseUrl}}/api/users/me
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "full_name": "Mi Nuevo Nombre"
}

### 30. Actualizar contraseña propia
PATCH {{baseUrl}}/api/users/me
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "password": "nuevapassword123"
}

### 31. Actualizar perfil sin autenticación (debería fallar con 401)
PATCH {{baseUrl}}/api/users/me
Content-Type: {{contentType}}

{
  "full_name": "Sin Auth"
}

################################################################################
# CAMBIAR CONTRASEÑA
################################################################################

### 32. Cambiar contraseña exitosamente
POST {{baseUrl}}/api/users/change-password
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "current_password": "password123",
  "new_password": "nuevapassword456"
}

### 33. Cambiar contraseña con contraseña actual incorrecta (debería fallar con 401)
POST {{baseUrl}}/api/users/change-password
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "current_password": "wrongpassword",
  "new_password": "nuevapassword456"
}

### 34. Cambiar contraseña con nueva contraseña corta (debería fallar con 422)
POST {{baseUrl}}/api/users/change-password
Authorization: Bearer {{employeeToken}}
Content-Type: {{contentType}}

{
  "current_password": "password123",
  "new_password": "123"
}

################################################################################
# ELIMINAR USUARIOS
################################################################################

### 35. HR elimina un usuario empleado
DELETE {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{hrToken}}

### 36. Empleado intenta eliminar usuario (debería fallar con 403)
DELETE {{baseUrl}}/api/users/1
Authorization: Bearer {{employeeToken}}

### 37. HR intenta eliminarse a sí mismo (debería fallar con 400)
DELETE {{baseUrl}}/api/users/2
Authorization: Bearer {{hrToken}}

### 38. Eliminar usuario inexistente (debería fallar con 404)
DELETE {{baseUrl}}/api/users/99999
Authorization: Bearer {{hrToken}}

################################################################################
# CASOS DE ERROR COMUNES
################################################################################

### 39. Request sin Content-Type (debería funcionar igual)
POST {{baseUrl}}/api/auth/login

{
  "email": "employee@test.com",
  "password": "password123"
}

### 40. Request con token malformado (debería fallar con 401)
GET {{baseUrl}}/api/auth/me
Authorization: Bearer token_malformado_123

### 41. Request con token expirado (debería fallar con 401)
# Nota: Usar un token generado hace más de 15 minutos
GET {{baseUrl}}/api/auth/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.expired.token

### 42. Request con Authorization header incompleto (debería fallar con 401)
GET {{baseUrl}}/api/auth/me
Authorization: {{hrToken}}

################################################################################
# HEALTH CHECK & DOCS
################################################################################

### 43. Health check / Root endpoint
GET {{baseUrl}}/

### 44. OpenAPI Documentation (JSON)
GET {{baseUrl}}/openapi.json

### 45. Swagger UI Documentation
GET {{baseUrl}}/docs

### 46. ReDoc Documentation
GET {{baseUrl}}/redoc

################################################################################
# SECUENCIA DE PRUEBA COMPLETA
################################################################################

### SECUENCIA 1: Flujo completo de HR
# 1. Login como HR
# 2. Listar usuarios
# 3. Crear nuevo empleado
# 4. Actualizar empleado
# 5. Ver detalles del empleado
# 6. Eliminar empleado

### SECUENCIA 2: Flujo completo de Empleado
# 1. Login como empleado
# 2. Ver mi perfil
# 3. Actualizar mi perfil
# 4. Cambiar mi contraseña
# 5. Intentar ver otros usuarios (debe fallar)
# 6. Intentar crear usuarios (debe fallar)

### SECUENCIA 3: Flujo completo de Fichajes (Empleado)
# 1. Login como empleado
# 2. Check-in (registrar entrada)
# 3. Ver mis fichajes
# 4. Ver mi fichaje activo
# 5. Check-out (registrar salida)
# 6. Solicitar corrección de un fichaje
# 7. Ver mis estadísticas

### SECUENCIA 4: Flujo completo de Fichajes (HR)
# 1. Login como HR
# 2. Ver todos los fichajes
# 3. Filtrar fichajes por usuario
# 4. Ver fichajes pendientes de corrección
# 5. Aprobar/rechazar correcciones
# 6. Ver estadísticas generales

### SECUENCIA 5: Flujo completo de Solicitudes de Vacaciones (Empleado)
# 1. Login como empleado
# 2. Ver mi balance de vacaciones
# 3. Crear solicitud de vacaciones
# 4. Ver mis solicitudes
# 5. Actualizar solicitud pendiente
# 6. Cancelar solicitud
# 7. Ver mis solicitudes filtradas por estado

### SECUENCIA 6: Flujo completo de Solicitudes de Vacaciones (HR)
# 1. Login como HR
# 2. Ver todas las solicitudes pendientes
# 3. Ver solicitud específica
# 4. Aprobar solicitud
# 5. Rechazar solicitud con comentarios
# 6. Ver balance de vacaciones de empleados
# 7. Filtrar solicitudes por tipo y estado

################################################################################
# NOTAS DE USO
################################################################################

# Para usar este archivo:
# 1. Instala la extensión "REST Client" en VS Code
# 2. Inicia el servidor: make dev (o uv run uvicorn app.main:app --reload)
# 3. Ejecuta las requests haciendo clic en "Send Request" sobre cada ###
# 4. Los tokens se pueden guardar automáticamente usando @name y capturando la respuesta
# 5. Actualiza las variables @baseUrl, @userId, @fichajeId según tu entorno

# Códigos de estado esperados:
# 200 OK - Operación exitosa (GET, PUT, PATCH, POST)
# 201 Created - Recurso creado exitosamente
# 204 No Content - Eliminación exitosa (DELETE)
# 400 Bad Request - Datos inválidos
# 401 Unauthorized - No autenticado o credenciales incorrectas
# 403 Forbidden - No autorizado (sin permisos)
# 404 Not Found - Recurso no encontrado
# 409 Conflict - Conflicto (email duplicado)
# 422 Unprocessable Entity - Error de validación

# Variables útiles:
# {{baseUrl}} - URL base de la API
# {{hrToken}} - Token JWT de usuario HR
# {{employeeToken}} - Token JWT de usuario empleado
# {{userId}} - ID de usuario para operaciones individuales
# {{fichajeId}} - ID de fichaje para operaciones individuales
# {{solicitudId}} - ID de solicitud de vacaciones para operaciones individuales
