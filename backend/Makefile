.PHONY: help install dev test lint format clean migration migrate shell check all status

# Variables
PYTHON := uv run python
FASTAPI := uv run fastapi
PYTEST := uv run pytest
RUFF := uv run ruff
BLACK := uv run black
ALEMBIC := uv run alembic

help: ## Mostrar ayuda
	@echo "Comandos disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Instalar dependencias con uv
	@echo "üì¶ Instalando dependencias..."
	./scripts/start_enviroment.sh

dev: ## Ejecutar servidor de desarrollo
	@echo "üöÄ Iniciando servidor de desarrollo..."
	@echo "üìù Usando: fastapi dev (con auto-reload)"
	$(FASTAPI) dev app/main.py --host 0.0.0.0 --port 8000

test: ## Ejecutar tests
	@echo "üß™ Ejecutando tests..."
	$(PYTEST) -v

test-cov: ## Ejecutar tests con cobertura
	@echo "üß™ Ejecutando tests con cobertura..."
	$(PYTEST) --cov=app --cov-report=html --cov-report=term

lint: ## Ejecutar linting
	@echo "üîç Ejecutando linting..."
	$(RUFF) check .

lint-fix: ## Ejecutar linting y arreglar autom√°ticamente
	@echo "üîß Ejecutando linting con auto-fix..."
	$(RUFF) check . --fix

format: ## Formatear c√≥digo con black
	@echo "‚ú® Formateando c√≥digo..."
	$(BLACK) .

format-check: ## Verificar formato sin modificar
	@echo "‚ú® Verificando formato..."
	$(BLACK) . --check

migration: ## Crear nueva migraci√≥n
	@read -p "Nombre de la migraci√≥n: " name; \
	echo "üìù Creando migraci√≥n: $$name"; \
	$(ALEMBIC) revision --autogenerate -m "$$name"

migrate: ## Aplicar migraciones
	@echo "‚¨ÜÔ∏è  Aplicando migraciones..."
	$(ALEMBIC) upgrade head

migrate-down: ## Revertir √∫ltima migraci√≥n
	@echo "‚¨áÔ∏è  Revirtiendo migraci√≥n..."
	$(ALEMBIC) downgrade -1

seed: ## Ejecutar seed de datos
	@echo "üå± Ejecutando seed..."
	$(PYTHON) -m app.scripts.seed_data

clean: ## Limpiar archivos temporales
	@echo "üßπ Limpiando archivos temporales..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.coverage" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
	rm -f hr_dev.db
	@echo "‚úÖ Limpieza completada"

status: ## Verificar estado del entorno
	@echo "ÔøΩ Verificando estado del entorno..."
	./scripts/check_environment.sh

shell: ## Abrir shell de Python con contexto de la app
	@echo "üêö Abriendo shell..."
	$(PYTHON) -i -c "from app.database import *; from app.models import *"

check: lint format-check test ## Ejecutar todas las verificaciones

all: install migrate dev ## Instalar, migrar y ejecutar

.DEFAULT_GOAL := help
